{"ast":null,"code":"var _jsxFileName = \"/home/erison/Documents/Projetos/botw-compendium-ReactJs/src/components/main.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Monsters from './monsters';\nimport Equipments from './equipments';\nimport Materials from './materials';\nimport Treasures from './treasures';\nimport Creatures from './creatures';\nimport Header from './header';\n/*\nComponente Main\n    -Responsável por solicitar os dados da API\n    -Passar os dados para JSON\n    -Criar os states contento os dados\n    -Passar os dados para cada componente como parâmetros\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Main = () => {\n  _s();\n\n  // A função fetchAPI recebe como parâmetro a url de cada entrada da API. 'SetList' é responsável por definir o state quando a função é chamada.\n  const fetchAPI = (url, setList) => {\n    fetch(url).then(response => response.json()).then(responseText => setList(responseText.data));\n    setTimeout(() => {\n      setis;\n    }, timeout);\n  };\n\n  const [isLoading, setIsLoading] = useState(true); // State onde os dados da API serão armazenados\n\n  const [monstersList, setmonsterList] = useState([]);\n  const [equipmentsList, setequipmentList] = useState([]);\n  const [materialsList, setmaterialsList] = useState([]);\n  const [treasuresList, settreasuresList] = useState([]);\n  const [creaturesList, setcreaturesList] = useState([]);\n  const [content, setContent] = useState('Monsters'); // Define qual componente será renderizado\n\n  const [searchterm, setsearchTerm] = useState(''); // Termo de busca\n\n  useEffect(() => {\n    fetchAPI('https://botw-compendium.herokuapp.com/api/v2/category/monsters', setmonsterList);\n    fetchAPI('https://botw-compendium.herokuapp.com/api/v2/category/equipment', setequipmentList);\n    fetchAPI('https://botw-compendium.herokuapp.com/api/v2/category/materials', setmaterialsList);\n    fetchAPI('https://botw-compendium.herokuapp.com/api/v2/category/treasure', settreasuresList);\n    fetchAPI('https://botw-compendium.herokuapp.com/api/v2/category/creatures', setcreaturesList);\n  }, []);\n\n  if (content === 'Monsters') {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        content: content,\n        setContent: setContent,\n        setsearchTerm: setsearchTerm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 26\n      }, this) : /*#__PURE__*/_jsxDEV(Monsters, {\n        monstersList: monstersList,\n        searchterm: searchterm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 50\n      }, this)]\n    }, void 0, true);\n  }\n\n  if (content === 'Equipments') {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        content: content,\n        setContent: setContent,\n        setsearchTerm: setsearchTerm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Equipments, {\n        equipmentsList: equipmentsList,\n        searchterm: searchterm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n  if (content === 'Materials') {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        content: content,\n        setContent: setContent,\n        setsearchTerm: setsearchTerm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Materials, {\n        materialsList: materialsList,\n        searchterm: searchterm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n  if (content === 'Treasures') {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        content: content,\n        setContent: setContent,\n        setsearchTerm: setsearchTerm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Treasures, {\n        treasuresList: treasuresList,\n        searchterm: searchterm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n  if (content === 'Creatures') {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        content: content,\n        setContent: setContent,\n        setsearchTerm: setsearchTerm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Creatures, {\n        creaturesList: creaturesList,\n        searchterm: searchterm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n};\n\n_s(Main, \"cvY9jSWruOr7GpNE/8kjAvidp6s=\");\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/home/erison/Documents/Projetos/botw-compendium-ReactJs/src/components/main.jsx"],"names":["React","useState","useEffect","Monsters","Equipments","Materials","Treasures","Creatures","Header","Main","fetchAPI","url","setList","fetch","then","response","json","responseText","data","setTimeout","setis","timeout","isLoading","setIsLoading","monstersList","setmonsterList","equipmentsList","setequipmentList","materialsList","setmaterialsList","treasuresList","settreasuresList","creaturesList","setcreaturesList","content","setContent","searchterm","setsearchTerm"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Monsters from './monsters'\nimport Equipments from './equipments'\nimport Materials from './materials'\nimport Treasures from './treasures'\nimport Creatures from './creatures'\nimport Header from './header'\n\n\n/*\nComponente Main\n    -Responsável por solicitar os dados da API\n    -Passar os dados para JSON\n    -Criar os states contento os dados\n    -Passar os dados para cada componente como parâmetros\n*/\nconst Main = () => {\n    // A função fetchAPI recebe como parâmetro a url de cada entrada da API. 'SetList' é responsável por definir o state quando a função é chamada.\n    const fetchAPI = (url, setList) => {\n        fetch(url)\n        .then(response => response.json())\n        .then(responseText => setList(responseText.data))\n        setTimeout(() => {\n           setis \n        }, timeout);\n    }\n    const [isLoading, setIsLoading] = useState(true)\n    // State onde os dados da API serão armazenados\n    const [monstersList, setmonsterList] = useState([]);\n    const [equipmentsList, setequipmentList] = useState([]);\n    const [materialsList, setmaterialsList] = useState([]);\n    const [treasuresList, settreasuresList] = useState([]);\n    const [creaturesList, setcreaturesList] = useState([]);\n\n    const [content, setContent] = useState('Monsters');// Define qual componente será renderizado\n    const [searchterm, setsearchTerm] = useState('');// Termo de busca\n\n    useEffect(() => {\n        fetchAPI('https://botw-compendium.herokuapp.com/api/v2/category/monsters', setmonsterList);\n        fetchAPI('https://botw-compendium.herokuapp.com/api/v2/category/equipment', setequipmentList);\n        fetchAPI('https://botw-compendium.herokuapp.com/api/v2/category/materials', setmaterialsList);\n        fetchAPI('https://botw-compendium.herokuapp.com/api/v2/category/treasure', settreasuresList);\n        fetchAPI('https://botw-compendium.herokuapp.com/api/v2/category/creatures', setcreaturesList);\n    }, [])\n\n    if (content === 'Monsters') {\n        return ( \n            <>\n            <Header content={content} setContent={setContent} setsearchTerm={setsearchTerm}/>\n            {isLoading ? <div>Loading...</div> : <Monsters monstersList={monstersList} searchterm={searchterm}/>}\n                        {/*passa o objeto da API como parametro para o componente child*/}\n            </>\n        );\n    } \n    if (content === 'Equipments') {\n        return (\n            <>\n            <Header content={content} setContent={setContent} setsearchTerm={setsearchTerm}/>\n            <Equipments equipmentsList={equipmentsList} searchterm={searchterm}/>\n            </>\n        )\n    }\n    if (content === 'Materials') {\n        return (\n            <>\n            <Header content={content} setContent={setContent} setsearchTerm={setsearchTerm}/>\n            <Materials materialsList={materialsList} searchterm={searchterm}/>\n            </>\n        )\n    }\n    if (content === 'Treasures') {\n        return (\n            <>\n            <Header content={content} setContent={setContent} setsearchTerm={setsearchTerm}/>\n            <Treasures treasuresList={treasuresList} searchterm={searchterm}/>\n            </>\n        )\n    }\n    if (content === 'Creatures') {\n        return (\n            <>\n            <Header content={content} setContent={setContent} setsearchTerm={setsearchTerm}/>\n            <Creatures creaturesList={creaturesList} searchterm={searchterm}/>\n            </>\n        )\n    }\n}\n \nexport default Main;"]},"metadata":{},"sourceType":"module"}