{"ast":null,"code":"var _jsxFileName = \"/home/erison/Documents/the_odin_project/botw-compendium-ReactJs/src/components/main.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Monsters from './monsters';\nimport Equipments from './equipments';\nimport Materials from './';\nimport Header from './header'; // parent \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Main = () => {\n  _s();\n\n  function fetchAPI(url) {\n    let request = new XMLHttpRequest();\n    request.open(\"GET\", url, false);\n    request.send();\n    return request.responseText;\n  } //fetch na sessão 'monsters' da API e converte para JSON\n\n\n  var [monstersList, setmonsterList] = useState([]);\n  useEffect(() => {\n    const API_URL = 'https://botw-compendium.herokuapp.com/api/v2/category/monsters';\n    var monsters = fetchAPI(API_URL);\n    var monsters_data = JSON.parse(monsters);\n    setmonsterList(monsters_data.data);\n  }, []); //fetch na sessão 'equipments' da API e converte para JSON\n\n  var [equipmentsList, setequipmentList] = useState([]);\n  useEffect(() => {\n    const API_URL = 'https://botw-compendium.herokuapp.com/api/v2/category/equipment';\n    var equipments = fetchAPI(API_URL);\n    var equipments_data = JSON.parse(equipments);\n    setequipmentList(equipments_data.data);\n  }, []); //fetch na sessão 'materials da API e converte para JSON\n\n  var [materialsList, setmaterialsList] = useState([]);\n  useEffect(() => {\n    const API_URL = 'https://botw-compendium.herokuapp.com/api/v2/category/materials';\n    var equipments = fetchAPI(API_URL);\n    var equipments_data = JSON.parse(equipments);\n    setmaterialsList(equipments_data.data);\n  }, []);\n  const [content, setContent] = useState('Monsters');\n\n  if (content === 'Monsters') {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        setContent: setContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Monsters, {\n        monstersList: monstersList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), \"             \"]\n    }, void 0, true);\n  }\n\n  if (content === 'Equipments') {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        setContent: setContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Equipments, {\n        equipmentsList: equipmentsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n  if (content === 'Materials') {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        setContent: setContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Equipments, {\n        materialsList: materialsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n};\n\n_s(Main, \"XxIiBeHflRV8GcBmdi6JnTRhq1s=\");\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/home/erison/Documents/the_odin_project/botw-compendium-ReactJs/src/components/main.jsx"],"names":["React","useState","useEffect","Monsters","Equipments","Materials","Header","Main","fetchAPI","url","request","XMLHttpRequest","open","send","responseText","monstersList","setmonsterList","API_URL","monsters","monsters_data","JSON","parse","data","equipmentsList","setequipmentList","equipments","equipments_data","materialsList","setmaterialsList","content","setContent"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Monsters from './monsters'\nimport Equipments from './equipments'\nimport Materials from './'\nimport Header from './header'\n\n\n// parent \nconst Main = () => {\n\n    function fetchAPI(url) {\n        let request = new XMLHttpRequest()\n        request.open(\"GET\", url, false)\n        request.send()\n        return request.responseText\n    }\n    //fetch na sessão 'monsters' da API e converte para JSON\n    \n    var [monstersList, setmonsterList] = useState([])\n\n    useEffect(() => {\n        const API_URL = 'https://botw-compendium.herokuapp.com/api/v2/category/monsters'\n        var monsters = fetchAPI(API_URL);\n        var monsters_data = JSON.parse(monsters);\n        setmonsterList(monsters_data.data)\n    }, [])\n\n    //fetch na sessão 'equipments' da API e converte para JSON\n    \n    var [equipmentsList, setequipmentList] = useState([])\n    \n    useEffect(() => {\n        const API_URL = 'https://botw-compendium.herokuapp.com/api/v2/category/equipment'\n        var equipments = fetchAPI(API_URL);\n        var equipments_data = JSON.parse(equipments);\n        setequipmentList(equipments_data.data)\n    }, [])\n\n    //fetch na sessão 'materials da API e converte para JSON\n\n    var [materialsList, setmaterialsList] = useState([])\n\n    useEffect(() => {\n        const API_URL = 'https://botw-compendium.herokuapp.com/api/v2/category/materials'\n        var equipments = fetchAPI(API_URL);\n        var equipments_data = JSON.parse(equipments);\n        setmaterialsList(equipments_data.data)\n    }, [])\n\n    const [content, setContent] = useState('Monsters');\n\n    if (content === 'Monsters') {\n        return ( \n            <>\n            <Header setContent={setContent}/>\n            <Monsters monstersList={monstersList}/>             {/*passa o objeto da API como parametro para o componente child*/}\n            </>\n        );\n    } \n\n    if (content === 'Equipments') {\n        return (\n            <>\n            <Header setContent={setContent}/>\n            <Equipments equipmentsList={equipmentsList}/>\n            </>\n        )\n    }\n\n    if (content === 'Materials') {\n        return (\n            <>\n            <Header setContent={setContent}/>\n            <Equipments materialsList={materialsList}/>\n            </>\n        )\n    }\n\n}\n \nexport default Main;"]},"metadata":{},"sourceType":"module"}